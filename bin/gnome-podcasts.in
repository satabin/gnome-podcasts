#!@PYTHON@

import sys
import argparse
import logging
import locale
import gettext
import os
import signal

# Make sure we'll find the pygobject module, even in JHBuild
sys.path.insert(1, '@pyexecdir@')
# Make sure we'll find the gnomepodcasts module, even in JHBuild
sys.path.insert(1, '@pythondir@')

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('GIRepository', '2.0')
gi.require_version('Tracker', '1.0')
gi.require_version('TrackerMiner', '1.0')
gi.require_version('Notify', '0.7')
from gi.repository import GIRepository, Gio, Gtk

import gnomepodcasts
from gnomepodcasts import application

localedir = '@localedir@'
pkgdatadir = '@pkgdatadir@'
datadir = '@datadir@'


# Log settings
LOG_FORMAT = '%(asctime)s %(levelname)s\t%(message)s'
LOG_DATE_FORMAT = '%H:%M:%S'

def set_exception_hook():
    """Configures sys.excepthook to enforce Gtk application exiting."""

    def new_hook(etype, evalue, etb):
        old_hook(etype, evalue, etb)
        while Gtk.main_level():
            Gtk.main_quit()
        sys.exit()

    old_hook = sys.excepthook
    sys.excepthook = new_hook

def set_log_level():
    """Sets application log level according to debug value."""
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--debug', action='store_true',
                        default=False, dest='debug')
    args = parser.parse_args()
    if args.debug:
        logging.basicConfig(level=logging.DEBUG, format=LOG_FORMAT,
                            datefmt=LOG_DATE_FORMAT)
        # Gtk hates "-d" switch, so lets drop it
        if '-d' in sys.argv:
            sys.argv.remove('-d')
        if '--debug' in sys.argv:
            sys.argv.remove('--debug')
    else:
        logging.basicConfig(level=logging.WARN, format=LOG_FORMAT,
                            datefmt=LOG_DATE_FORMAT)

def set_internationalization():
    locale.bindtextdomain('gnome-podcasts', localedir)
    locale.textdomain('gnome-podcasts')
    gettext.bindtextdomain('gnome-podcasts', localedir)
    gettext.textdomain('gnome-podcasts')

def set_resources():
    """Sets application ressource file."""
    resource = Gio.resource_load(
        os.path.join(pkgdatadir, 'gnome-podcasts.gresource'))
    Gio.Resource._register(resource)  # nopep8

def run_application():
    """Runs GNOME Podcasts application and returns its exit code."""
    from gnomepodcasts.application import Application

    app = Application()
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    return app.run(sys.argv)

if __name__ == "__main__":
    set_exception_hook()
    set_log_level()
    set_internationalization()
    set_resources()
    run_application()
